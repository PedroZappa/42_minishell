#ifndef MINISHELL_H
# define MINISHELL_H

//=============================================================================/
//								Librariy Headers                               /
//=============================================================================/

# include "../lib/libft/libft/libft.h"			// libft library
# include "../lib/libft/ft_printf/ft_printf.h" 	// ft_printf

//=============================================================================/
//							Variables & Definitions                            /
//=============================================================================/

// ANSI Escape codes
//Regular text
# define BLK "\e[0;30m"	// RGB(0, 0, 0)
# define RED "\e[0;31m"	// RGB(255, 0, 0)
# define GRN "\e[0;32m"	// RGB(0, 255, 0)
# define YEL "\e[0;33m"	// RGB(255, 255, 0)
# define BLU "\e[0;34m"	// RGB(0, 0, 255)
# define MAG "\e[0;35m"	// RGB(255, 0, 255)
# define CYN "\e[0;36m"	// RGB(0, 255, 255)
# define WHT "\e[0;37m"	// RGB(255, 255, 255)
# define NC "\e[0m"

/// @enum	Bool
typedef enum e_bool
{
	NO = 0,
	YES = 1
}	t_bool;

/// @enum	Exit status
typedef enum e_exit
{
	SUCCESS,
	FAILURE
}	t_exit;

//=============================================================================/
//									Enums	                                   /
//=============================================================================/

/// @enum	Token types
typedef enum e_token_type
{
	TK_NAME,
	TK_NULL,
	TK_BLANK,
	TK_IN,
	TK_OUT,
	TK_PIPE,
	TK_OR,
	TK_AND,
}	t_token_type;

/// @enum	Command types
typedef enum e_cmd_type
{
	CMD_EXEC,
	CMD_ECHO,
	CMD_CD,
	CMD_PWD,
	CMD_EXPORT,
	CMD_UNSET,
	CMD_ENV,
	CMD_EXIT,
	CMD_HELP,
}	t_cmd_type;

//=============================================================================/
//                               Structures                                    /
//=============================================================================/

/// @struct		Token
/// @brief		Structure for linked list to store tokens
///	@var type	Token type
///	@var val	Token string
///	@var len	Token length
///	@var to_del	Flag to delete token
///	@var next	Next token
typedef struct s_token
{
	t_token_type	type;
	char			*val;
	int				len;
	int				to_del;
	struct s_token	*next;
}	t_token;

//=============================================================================/
//							Function Prototypes                                /
//=============================================================================/
//=============================================================================/
//	00	Authentication														   /
//=============================================================================/

//=============================================================================/
//	01	Main																   /
//=============================================================================/

//=============================================================================/
//	02	Signals																   /
//=============================================================================/

//=============================================================================/
//	03	Parser																   /
//=============================================================================/

//=============================================================================/
//	04	Termios																   /
//=============================================================================/

//=============================================================================/
//	05	Tokens																   /
//=============================================================================/

//=============================================================================/
//	06	Env																	   /
//=============================================================================/

//=============================================================================/
//	07	Exec																   /
//=============================================================================/

//=============================================================================/
//	08	Builtins															   /
//=============================================================================/

//=============================================================================/
//	09	Free																   /
//=============================================================================/

#endif
